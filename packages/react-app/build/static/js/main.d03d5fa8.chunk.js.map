{"version":3,"sources":["constants.js","components/Address.jsx","components/Balance.jsx","helpers/Transactor.js","helpers/Web3ModalSetup.js","helpers/ipfs.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/WalletImport.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.jsx","components/Contract/FunctionForm.jsx","components/Faucet.jsx","components/Header.jsx","hooks/useStaticJsonRPC.js","helpers/loadAppContracts.js","components/Swap.jsx","components/Timeline.jsx","components/L2Bridge.jsx","components/NetworkDisplay.jsx","views/Hints.jsx","views/Subgraph.jsx","views/StrategyBuilder/Block/block.svg","views/StrategyBuilder/Block/Block.jsx","views/StrategyBuilder/blockOptions.js","views/StrategyBuilder/CreateBlock/CreateBlock.jsx","views/StrategyBuilder/BlockDetails/BlockDetails.jsx","views/StrategyBuilder/abis/registry.abi.js","views/StrategyBuilder/StrategyBuilder.jsx","views/StrategyBuilder/constants.js","App.jsx","index.jsx","contracts/external_contracts.js"],"names":["INFURA_ID","BLOCKNATIVE_DAPPID","ALCHEMY_KEY","NETWORKS","localhost","name","color","chainId","blockExplorer","rpcUrl","process","REACT_APP_CODESPACES","window","location","hostname","replace","global","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","polygon","mumbai","localOptimismL1","localOptimism","kovanOptimism","optimism","rinkebyArbitrum","arbitrum","devnetArbitrum","localAvalanche","fujiAvalanche","mainnetAvalanche","testnetHarmony","mainnetHarmony","fantom","testnetFantom","moonbeam","moonriver","moonbaseAlpha","moonbeamDevNode","NETWORK","n","Text","Typography","Address","props","currentTheme","useThemeSwitcher","address","value","ens","useLookupAddress","ensProvider","ensSplit","split","validEnsCheck","length","etherscanLink","blockExplorerLink","displayAddress","substr","size","minimized","style","verticalAlign","target","href","rel","seed","toLowerCase","scale","fontSize","paddingLeft","onChange","editable","copyable","text","avatar","paragraph","rows","utils","require","Balance","useState","dollarMode","setDollarMode","balance","useBalance","provider","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","padding","cursor","onClick","ethers","callbacks","Transactor","providerOrSigner","etherscan","tx","callback","a","Signer","isSigner","signer","getNetwork","network","_isProvider","getSigner","console","log","notify","options","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","hash","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","indexOf","emitter","on","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","setInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","clearInterval","wait","data","error","JSON","parse","stringify","body","obj","errorObj","e","walletLinkProvider","WalletLink","appName","makeWeb3Provider","web3ModalSetup","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","portis","display","logo","Portis","id","fortmatic","Fortmatic","key","connector","_options","enable","authereum","Authereum","create","host","port","protocol","Blockie","isENS","endsWith","AddressInput","setValue","scan","setScan","currentValue","updateAddress","useCallback","newValue","resolveName","possibleAddress","zIndex","position","left","top","width","delay","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","isAddress","addonAfter","marginTop","count","CameraOutlined","QrcodeOutlined","EtherInput","mode","setMode","setDisplay","useEffect","usdValue","ethValue","WalletImport","setShowImport","importMnemonic","setImportMnemonic","importMnemonicIndex","setImportMnemonicIndex","password","setPassword","importPrivatekey","setImportPrivatekey","importAddress","setImportAddress","ethersSeed","mnemonicToSeed","ethersHDNode","HDNode","fromSeed","fullPath","ethersDerivedHDNode","derivePath","ethersPrivateKey","privateKey","calculatePK","officialEthersWallet","Wallet","calculateAddress","opacity","Password","disabled","height","float","currentPrivateKey","localStorage","getItem","setItem","Date","now","trim","reload","marginRight","signerAddress","setSignerAddress","getAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","showImport","providerSend","title","WalletOutlined","rotate","showImportButton","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","fullLink","el","document","createElement","appendChild","select","execCommand","removeChild","success","createRandom","_signingKey","inputStyle","visible","paddingRight","onOk","onCancel","footer","type","loading","parseEther","to","SendOutlined","Account","accountButtonInfo","userSigner","localProvider","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isContract","cachedProvider","action","marginLeft","shape","constants","BigNumber","Title","Header","link","subTitle","justifyContent","flexDirection","flex","alignItems","children","defaultProps","createProvider","url","p","providers","StaticJsonRpcProvider","ready","useStaticJsonRPC","urlArray","setProvider","handleProviders","race","map","_p","Select","Option","NetworkDisplay","NETWORKCHECK","localChainId","selectedChainId","targetNetwork","USE_NETWORK_SELECTOR","networkDisplay","networkSelected","networkLocal","right","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","Subgraph","_g","_extends","Object","assign","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgBlock","_ref","svgRef","titleId","viewBox","xmlns","xmlnsXlink","className","ref","stroke","strokeWidth","fill","fillRule","points","ForwardRef","strokes","Array","Block","strokeColor","variant","_","index","borderColor","blockOptions","domain","label","asset","fields","symbol","in","out","address_to_call","approve","receiptAddressToken","CreateBlock","setVisibility","setEditableBlock","setBlocks","handleCancel","handleOk","block","current","res","BlockDetails","blocks","blockData","setBlockData","handleAddBlock","handleChangeInput","ev","updatedFields","item","fieldIndex","Number","ariaRowIndex","field","some","Boolean","background","REGISTRY_ABI","inputs","internalType","stateMutability","anonymous","indexed","outputs","components","erc20Abi","mutateAddress","slice","StrategyBuilder","addBlockModalOpen","setAddBlockModalOpen","editableBlock","handleSubmit","Web3Provider","send","factoryAbi","factoryContract","Contract","abi","startingToken","beforeLoop","formatBytes32String","approvals","token","spender","filter","loop","_supportedTokens","approval","b","c","d","f","g","find","newVault","userToVault","vaultAddress","vault","vaultAbi","setUp","autonomyRegistry","vaultRunLoopSignature","vaultRunLoopInterface","Interface","callData","encodeFunctionData","newReq","receipt","initialNetwork","Web3ModalSetup","App","networkOptions","injectedProvider","setInjectedProvider","setAddress","selectedNetwork","REACT_APP_PROVIDER","clearCachedProvider","disconnect","setTimeout","useExchangeEthPrice","useGasPrice","useUserProviderAndSigner","_network","contractConfig","deployedContracts","externalContracts","readContracts","useContractLoader","mainnetContracts","useOnBlock","useContractReader","connect","code","reason","connection","useBurner","themes","dark","light","subgraphUri","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","themeMap","defaultTheme","getElementById","module","exports","contracts","DAI","payable","constant","UNI"],"mappings":"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","file":"static/js/main.d03d5fa8.chunk.js","sourcesContent":["// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\nexport const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"DNXJA8RX2Q3VZ4URQIWP7Z68CJXQZSC6AW\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const ALCHEMY_KEY = \"oKxs-03sij-U_N0iOlrSsZFr29-IqbuF\";\n\nconst localRpcUrl = process.env.REACT_APP_CODESPACES\n  ? `https://${window.location.hostname.replace(\"3000\", \"8545\")}`\n  : \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: localRpcUrl,\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  polygon: {\n    name: \"polygon\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://polygon-rpc.com/\",\n    blockExplorer: \"https://polygonscan.com/\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.polygon.technology/\",\n    blockExplorer: \"https://mumbai.polygonscan.com/\",\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + (global.window ? window.location.hostname : \"localhost\") + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n  rinkebyArbitrum: {\n    name: \"rinkebyArbitrum\",\n    color: \"#28a0f0\",\n    chainId: 421611,\n    blockExplorer: \"https://testnet.arbiscan.io/\",\n    rpcUrl: \"https://rinkeby.arbitrum.io/rpc\",\n  },\n  arbitrum: {\n    name: \"arbitrum\",\n    color: \"#28a0f0\",\n    chainId: 42161,\n    blockExplorer: \"https://arbiscan.io/\",\n    rpcUrl: \"https://arb1.arbitrum.io/rpc\",\n  },\n  devnetArbitrum: {\n    name: \"devnetArbitrum\",\n    color: \"#28a0f0\",\n    chainId: 421612,\n    blockExplorer: \"https://nitro-devnet-explorer.arbitrum.io/\",\n    rpcUrl: \"https://nitro-devnet.arbitrum.io/rpc\",\n  },\n  localAvalanche: {\n    name: \"localAvalanche\",\n    color: \"#666666\",\n    chainId: 43112,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:9650/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  fujiAvalanche: {\n    name: \"fujiAvalanche\",\n    color: \"#666666\",\n    chainId: 43113,\n    blockExplorer: \"https://cchain.explorer.avax-test.network/\",\n    rpcUrl: `https://api.avax-test.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  mainnetAvalanche: {\n    name: \"mainnetAvalanche\",\n    color: \"#666666\",\n    chainId: 43114,\n    blockExplorer: \"https://cchain.explorer.avax.network/\",\n    rpcUrl: `https://api.avax.network/ext/bc/C/rpc`,\n    gasPrice: 225000000000,\n  },\n  testnetHarmony: {\n    name: \"testnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666700000,\n    blockExplorer: \"https://explorer.pops.one/\",\n    rpcUrl: `https://api.s0.b.hmny.io`,\n    gasPrice: 1000000000,\n  },\n  mainnetHarmony: {\n    name: \"mainnetHarmony\",\n    color: \"#00b0ef\",\n    chainId: 1666600000,\n    blockExplorer: \"https://explorer.harmony.one/\",\n    rpcUrl: `https://api.harmony.one`,\n    gasPrice: 1000000000,\n  },\n  fantom: {\n    name: \"fantom\",\n    color: \"#1969ff\",\n    chainId: 250,\n    blockExplorer: \"https://ftmscan.com/\",\n    rpcUrl: `https://rpcapi.fantom.network`,\n    gasPrice: 1000000000,\n  },\n  testnetFantom: {\n    name: \"testnetFantom\",\n    color: \"#1969ff\",\n    chainId: 4002,\n    blockExplorer: \"https://testnet.ftmscan.com/\",\n    rpcUrl: `https://rpc.testnet.fantom.network`,\n    gasPrice: 1000000000,\n    faucet: \"https://faucet.fantom.network/\",\n  },\n  moonbeam: {\n    name: \"moonbeam\",\n    color: \"#53CBC9\",\n    chainId: 1284,\n    blockExplorer: \"https://moonscan.io\",\n    rpcUrl: \"https://rpc.api.moonbeam.network\",\n  },\n  moonriver: {\n    name: \"moonriver\",\n    color: \"#53CBC9\",\n    chainId: 1285,\n    blockExplorer: \"https://moonriver.moonscan.io/\",\n    rpcUrl: \"https://rpc.api.moonriver.moonbeam.network\",\n  },\n  moonbaseAlpha: {\n    name: \"moonbaseAlpha\",\n    color: \"#53CBC9\",\n    chainId: 1287,\n    blockExplorer: \"https://moonbase.moonscan.io/\",\n    rpcUrl: \"https://rpc.api.moonbase.moonbeam.network\",\n    faucet: \"https://discord.gg/SZNP8bWHZq\",\n  },\n  moonbeamDevNode: {\n    name: \"moonbeamDevNode\",\n    color: \"#53CBC9\",\n    chainId: 1281,\n    blockExplorer: \"https://moonbeam-explorer.netlify.app/\",\n    rpcUrl: \"http://127.0.0.1:9933\",\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Blockies from \"react-blockies\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\n\n// changed value={address} to address={address}\n\nconst { Text } = Typography;\n\n/** \n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n**/\n\nconst blockExplorerLink = (address, blockExplorer) => `${blockExplorer || \"https://etherscan.io/\"}address/${address}`;\n\nexport default function Address(props) {\n  const { currentTheme } = useThemeSwitcher();\n  const address = props.value || props.address;\n  const ens = useLookupAddress(props.ensProvider, address);\n  const ensSplit = ens && ens.split(\".\");\n  const validEnsCheck = ensSplit && ensSplit[ensSplit.length - 1] === \"eth\";\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  let displayAddress = address?.substr(0, 5) + \"...\" + address?.substr(-4);\n\n  if (validEnsCheck) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {props.onChange ? (\n          <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        ) : (\n          <Text copyable={{ text: address }}>\n            <a\n              style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#ddd\" }}\n              target=\"_blank\"\n              href={etherscanLink}\n              rel=\"noopener noreferrer\"\n            >\n              {displayAddress}\n            </a>\n          </Text>\n        )}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"eth-hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n**/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  const balance = useBalance(props.provider, props.address);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") usingBalance = props.balance;\n  if (typeof props.value !== \"undefined\") usingBalance = props.value;\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier || 1;\n\n  if (dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n      var options = null;\n      var notify = null;\n      options = {\n        dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n        system: \"ethereum\",\n        networkId: network.chainId,\n        // darkMode: Boolean, // (default: false)\n        transactionHandler: txInformation => {\n          if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n          const possibleFunction = callbacks[txInformation.transaction.hash];\n          if (typeof possibleFunction === \"function\") {\n            possibleFunction(txInformation.transaction);\n          }\n        },\n      };\n\n      notify = Notify(options);\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback(e);\n        }\n      }\n    };\n  }\n}\n","import Portis from \"@portis/web3\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Authereum from \"authereum\";\nimport Fortmatic from \"fortmatic\";\nimport WalletLink from \"walletlink\";\nimport Web3Modal from \"web3modal\";\nimport { ALCHEMY_KEY, INFURA_ID } from \"../constants\";\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`, 1);\n\n// Portis ID: 6255fb2b-58c8-433b-a2c9-62098c05ddc9\n/**\n  Web3 modal helps us \"connect\" external wallets:\n**/\nconst web3ModalSetup = () =>\n  new Web3Modal({\n    network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n    cacheProvider: true, // optional\n    theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n    providerOptions: {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          bridge: \"https://polygon.bridge.walletconnect.org\",\n          infuraId: INFURA_ID,\n          rpc: {\n            10: \"https://mainnet.optimism.io\", // xDai\n            100: \"https://rpc.gnosischain.com\", // xDai\n            137: \"https://polygon-rpc.com\",\n            31337: \"http://localhost:8545\",\n            42161: \"https://arb1.arbitrum.io/rpc\",\n            80001: \"https://rpc-mumbai.maticvigil.com\",\n            71401: \"https://godwoken-testnet-v1.ckbapp.dev\",\n          },\n        },\n      },\n      portis: {\n        display: {\n          logo: \"https://user-images.githubusercontent.com/9419140/128913641-d025bc0c-e059-42de-a57b-422f196867ce.png\",\n          name: \"Portis\",\n          description: \"Connect to Portis App\",\n        },\n        package: Portis,\n        options: {\n          id: \"6255fb2b-58c8-433b-a2c9-62098c05ddc9\",\n        },\n      },\n      fortmatic: {\n        package: Fortmatic, // required\n        options: {\n          key: \"pk_live_5A7C91B2FC585A17\", // required\n        },\n      },\n      // torus: {\n      //   package: Torus,\n      //   options: {\n      //     networkParams: {\n      //       host: \"https://localhost:8545\", // optional\n      //       chainId: 1337, // optional\n      //       networkId: 1337 // optional\n      //     },\n      //     config: {\n      //       buildEnv: \"development\" // optional\n      //     },\n      //   },\n      // },\n      \"custom-walletlink\": {\n        display: {\n          logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n          name: \"Coinbase\",\n          description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n        },\n        package: walletLinkProvider,\n        connector: async (provider, _options) => {\n          await provider.enable();\n          return provider;\n        },\n      },\n      authereum: {\n        package: Authereum, // required\n      },\n    },\n  });\n\nexport default web3ModalSetup;\n","import { create } from \"ipfs-http-client\";\nimport { BufferList } from \"bl\";\nexport const ipfs = create({ host: \"ipfs.infura.io\", port: \"5001\", protocol: \"https\" });\n\nexport async function addToIPFS(file) {\n  const fileAdded = await ipfs.add(file);\n\n  return fileAdded;\n}\n\nexport function urlFromCID(cid) {\n  return `https://ipfs.infura.io/ipfs/${cid}`;\n}\n\nexport async function getFromIPFS(hashToGet) {\n  for await (const file of ipfs.cat(hashToGet)) {\n    const content = new BufferList(file).toString();\n\n    return content;\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { Badge, Input } from \"antd\";\nimport React, { useCallback, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { useLookupAddress } from \"eth-hooks/dapps/ens\";\nimport QrReader from \"react-qr-reader\";\n\nimport Blockie from \"./Blockie\";\n\nconst isENS = (address = \"\") => address.endsWith(\".eth\") || address.endsWith(\".xyz\");\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/** \n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n**/\nexport default function AddressInput(props) {\n  const { ensProvider, onChange } = props;\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (isENS(address)) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  return (\n    <div>\n      {scan ? (\n        <div\n          style={{\n            zIndex: 256,\n            position: \"absolute\",\n            left: 0,\n            top: 0,\n            width: \"100%\",\n          }}\n          onClick={() => {\n            setScan(false);\n          }}\n        >\n          <QrReader\n            delay={250}\n            resolution={1200}\n            onError={e => {\n              console.log(\"SCAN ERROR\", e);\n              setScan(false);\n            }}\n            onScan={newValue => {\n              if (newValue) {\n                console.log(\"SCAN VALUE\", newValue);\n                let possibleNewValue = newValue;\n                if (possibleNewValue.indexOf(\"/\") >= 0) {\n                  possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n                  console.log(\"CLEANED VALUE\", possibleNewValue);\n                }\n                setScan(false);\n                updateAddress(possibleNewValue);\n              }\n            }}\n            style={{ width: \"100%\" }}\n          />\n        </div>\n      ) : (\n        \"\"\n      )}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ethers.utils.isAddress(currentValue) && !isENS(currentValue) && isENS(ens) ? ens : currentValue}\n        addonAfter={\n          <div\n            style={{ marginTop: 4, cursor: \"pointer\" }}\n            onClick={() => {\n              setScan(!scan);\n            }}\n          >\n            <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n              <QrcodeOutlined style={{ fontSize: 18 }} />\n            </Badge>{\" \"}\n            Scan\n          </div>\n        }\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/**\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n**/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={mode === \"USD\" ? \"$\" : \"Ξ\"}\n      value={display}\n      addonAfter={\n        !props.price ? (\n          \"\"\n        ) : (\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              if (mode === \"USD\") {\n                setMode(\"ETH\");\n                setDisplay(currentValue);\n              } else {\n                setMode(\"USD\");\n                if (currentValue) {\n                  const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n                  setDisplay(usdValue);\n                } else {\n                  setDisplay(currentValue);\n                }\n              }\n            }}\n          >\n            {mode === \"USD\" ? \"USD 🔀\" : \"ETH 🔀\"}\n          </div>\n        )\n      }\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Button, Input } from \"antd\";\nimport Address from \"./Address\";\n\nexport default function WalletImport({ setShowImport }) {\n  const [importMnemonic, setImportMnemonic] = useState();\n  const [importMnemonicIndex, setImportMnemonicIndex] = useState(\"0\");\n  const [password, setPassword] = useState(\"\");\n  const [importPrivatekey, setImportPrivatekey] = useState();\n  const [importAddress, setImportAddress] = useState();\n\n  useEffect(() => {\n    const calculatePK = async () => {\n      if (importMnemonic) {\n        const ethersSeed = ethers.utils.mnemonicToSeed(importMnemonic, password);\n        const ethersHDNode = ethers.utils.HDNode.fromSeed(ethersSeed);\n\n        const wallet_hdpath = \"m/44'/60'/0'/0/\";\n        const fullPath = wallet_hdpath + importMnemonicIndex;\n\n        const ethersDerivedHDNode = ethersHDNode.derivePath(fullPath);\n        const ethersPrivateKey = ethersDerivedHDNode.privateKey;\n\n        setImportPrivatekey(ethersPrivateKey);\n      } else {\n        setImportPrivatekey();\n      }\n    };\n    calculatePK();\n  }, [importMnemonic, importMnemonicIndex, password]);\n\n  useEffect(() => {\n    const calculateAddress = async () => {\n      if (importPrivatekey) {\n        try {\n          const officialEthersWallet = new ethers.Wallet(importPrivatekey);\n          console.log(officialEthersWallet);\n          setImportAddress(officialEthersWallet.address);\n        } catch (e) {\n          console.log(e);\n          setImportAddress(\"\");\n        }\n      }\n    };\n    calculateAddress();\n  }, [importPrivatekey]);\n\n  return (\n    <div>\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h2>IMPORT</h2>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>mnemonic</div>\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"word1 word2 word3\"\n        onChange={async e => {\n          setImportMnemonic(e.target.value);\n        }}\n      />\n\n      <Input\n        style={{ width: 69 }}\n        value={importMnemonicIndex}\n        onChange={e => {\n          setImportMnemonicIndex(e.target.value);\n        }}\n        size=\"large\"\n      />\n\n      <Input.Password\n        style={{ width: 380 }}\n        size=\"large\"\n        placeholder=\"optional password\"\n        onChange={async e => {\n          setPassword(e.target.value);\n        }}\n      />\n\n      <div style={{ marginTop: 21, width: 420 }}>\n        <h4>OR</h4>\n      </div>\n\n      <div style={{ opacity: 0.5 }}>private key</div>\n      <Input.Password\n        disabled={importMnemonic}\n        style={{ width: 420 }}\n        size=\"large\"\n        value={importPrivatekey}\n        placeholder=\"0x...\"\n        onChange={e => {\n          setImportPrivatekey(e.target.value);\n        }}\n      />\n\n      <hr />\n\n      {importAddress ? (\n        <div style={{ width: 420, height: 200 }}>\n          <div style={{ float: \"right\", marginTop: 64 }}>\n            <Address value={importAddress} />\n          </div>\n          <hr />\n        </div>\n      ) : (\n        \"\"\n      )}\n\n      <div style={{ float: \"right\" }}>\n        <Button\n          style={{ marginTop: 16 }}\n          disabled={!importPrivatekey || (importMnemonic && importMnemonic.length < 7)} //safety third!\n          onClick={() => {\n            const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n            if (currentPrivateKey) {\n              window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n            }\n\n            try {\n              const officialEthersWallet = new ethers.Wallet(importPrivatekey.trim());\n              console.log(officialEthersWallet);\n              setImportAddress(officialEthersWallet.address);\n              window.localStorage.setItem(\"metaPrivateKey\", importPrivatekey);\n              window.location.reload();\n              //setShowImport(!showImport)\n            } catch (e) {\n              console.log(e);\n            }\n          }}\n        >\n          <span style={{ marginRight: 8 }}>💾</span>Save\n        </Button>\n      </div>\n\n      <Button\n        style={{ marginTop: 16 }}\n        onClick={() => {\n          setShowImport(false);\n        }}\n      >\n        <span style={{ marginRight: 8 }}>⏪</span>Cancel\n      </Button>\n    </div>\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, message, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\nimport WalletImport from \"./WalletImport\";\n\nconst { Text } = Typography;\n\n/**\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n**/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const [showImport, setShowImport] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: props.padding ? props.padding : 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: props.size ? props.size : 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  const showImportButton = (\n    <Button\n      style={{ marginTop: 16 }}\n      onClick={() => {\n        setShowImport(true);\n      }}\n    >\n      <span style={{ marginRight: 8 }}>💾</span>Import\n    </Button>\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      const fullLink = \"https://punkwallet.io/pk#\" + pk;\n\n      display = (\n        <div>\n          <div>\n            <b>Private Key:</b>\n            <div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {pk}\n              </Text>\n            </div>\n\n            <div style={{ marginTop: 16 }}>\n              <div>\n                <b>Punk Wallet:</b>\n              </div>\n              <Text style={{ fontSize: 11 }} copyable>\n                {fullLink}\n              </Text>\n            </div>\n\n            <br />\n            <i>\n              Point your camera phone at qr code to open in &nbsp;\n              <a target=\"_blank\" href={fullLink} rel=\"noopener noreferrer\">\n                Punk Wallet\n              </a>\n              :\n            </i>\n\n            <div\n              style={{ cursor: \"pointer\" }}\n              onClick={() => {\n                const el = document.createElement(\"textarea\");\n                el.value = fullLink;\n                document.body.appendChild(el);\n                el.select();\n                document.execCommand(\"copy\");\n                document.body.removeChild(el);\n                message.success(<span style={{ position: \"relative\" }}>Copied Private Key Link</span>);\n              }}\n            >\n              <QR value={fullLink} size=\"450\" level=\"H\" includeMargin renderAs=\"svg\" />\n            </div>\n          </div>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={\n          showImport\n            ? null\n            : [\n                showImportButton,\n                privateKeyButton,\n                receiveButton,\n                <Button\n                  key=\"submit\"\n                  type=\"primary\"\n                  disabled={!amount || !toAddress || qr}\n                  loading={false}\n                  onClick={() => {\n                    const tx = Transactor(props.signer || props.provider);\n\n                    let value;\n                    try {\n                      value = ethers.utils.parseEther(\"\" + amount);\n                    } catch (e) {\n                      // failed to parseEther, try something else\n                      value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n                    }\n\n                    tx({\n                      to: toAddress,\n                      value,\n                    });\n                    setOpen(!open);\n                    setQr();\n                  }}\n                >\n                  <SendOutlined /> Send\n                </Button>,\n              ]\n        }\n      >\n        {showImport ? <WalletImport setShowImport={setShowImport} /> : display}\n      </Modal>\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/** \n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n    isContract={boolean}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n**/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isContract,\n}) {\n  const { currentTheme } = useThemeSwitcher();\n\n  let accountButtonInfo;\n  if (web3Modal?.cachedProvider) {\n    accountButtonInfo = { name: \"Logout\", action: logoutOfWeb3Modal };\n  } else {\n    accountButtonInfo = { name: \"Connect\", action: loadWeb3Modal };\n  }\n\n  const display = !minimized && (\n    <span>\n      {address && (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} fontSize={20} />\n      )}\n      <Balance address={address} provider={localProvider} price={price} size={20} />\n      {!isContract && (\n        <Wallet\n          address={address}\n          provider={localProvider}\n          signer={userSigner}\n          ensProvider={mainnetProvider}\n          price={price}\n          color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n          size={22}\n          padding={\"0px\"}\n        />\n      )}\n    </span>\n  );\n\n  return (\n    <div style={{ display: \"flex\" }}>\n      {display}\n      {web3Modal && (\n        <Button style={{ marginLeft: 8 }} shape=\"round\" onClick={accountButtonInfo.action}>\n          {accountButtonInfo.name}\n        </Button>\n      )}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/** \n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n**/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport Address from \"../Address\";\n\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = (thing, asText = false, blockExplorer) => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      const displayable = \"Ξ\" + utils.formatUnits(thing, \"ether\");\n      return asText ? displayable : <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable}</span>;\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return asText ? thing : <Address address={thing} fontSize={22} blockExplorer={blockExplorer} />;\n  }\n  if (thing && thing.constructor && thing.constructor.name === \"Array\") {\n    const mostReadable = v => ([\"number\", \"boolean\"].includes(typeof v) ? v : tryToDisplayAsText(v));\n    const displayable = JSON.stringify(thing.map(mostReadable));\n    return asText ? (\n      displayable\n    ) : (\n      <span style={{ overflowWrap: \"break-word\", width: \"100%\" }}>{displayable.replaceAll(\",\", \",\\n\")}</span>\n    );\n  }\n  return JSON.stringify(thing);\n};\n\nconst tryToDisplayAsText = thing => tryToDisplay(thing, true);\n\nexport { tryToDisplay, tryToDisplayAsText };\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\n\nimport { Transactor } from \"../../helpers\";\nimport { tryToDisplay, tryToDisplayAsText } from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nconst getFunctionInputKey = (functionInfo, input, inputIndex) => {\n  const name = input?.name ? input.name : \"input_\" + inputIndex + \"_\";\n  return functionInfo.name + \"_\" + name + \"_\" + input.type;\n};\n\nconst isReadable = fn => fn.stateMutability === \"view\" || fn.stateMutability === \"pure\";\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  const inputs = functionInfo.inputs.map((input, inputIndex) => {\n    const key = getFunctionInputKey(functionInfo, input, inputIndex);\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const handleForm = returned => {\n    if (returned) {\n      setForm({});\n    }\n  };\n\n  const buttonIcon = isReadable(functionInfo) ? (\n    <Button style={{ marginLeft: -32 }}>Read📡</Button>\n  ) : (\n    <Button style={{ marginLeft: -32 }}>Send💸</Button>\n  );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              const args = functionInfo.inputs.map((input, inputIndex) => {\n                const key = getFunctionInputKey(functionInfo, input, inputIndex);\n                let value = form[key];\n                if ([\"array\", \"tuple\"].includes(input.baseType)) {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                try {\n                  const returned = await contractFunction(...args);\n                  handleForm(returned);\n                  result = tryToDisplayAsText(returned);\n                } catch (err) {\n                  console.error(err);\n                }\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                handleForm(returned);\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Button, Input, Tooltip } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/**\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n**/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  const { price, placeholder, localProvider, ensProvider } = props;\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (localProvider) {\n        const _faucetAddress = await localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n      }\n    };\n    getFaucetAddress();\n  }, [localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const updateAddress = newValue => {\n    if (typeof newValue !== \"undefined\" && utils.isAddress(newValue)) {\n      setAddress(newValue);\n    }\n  };\n\n  const tx = Transactor(localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={placeholder ? placeholder : \"local faucet\"}\n        prefix={blockie}\n        value={address}\n        onChange={e => updateAddress(e.target.value)}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.5\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={localProvider}\n              ensProvider={ensProvider}\n              price={price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import React from \"react\";\nimport { Typography } from \"antd\";\n\nconst { Title, Text } = Typography;\n\n// displays a page header\n\nexport default function Header({ link, title, subTitle, ...props }) {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"space-between\", padding: \"1.2rem\" }}>\n      <div style={{ display: \"flex\", flexDirection: \"column\", flex: 1, alignItems: \"start\", fontSize: \"25px\" }}>\n        Slothy\n      </div>\n      {props.children}\n    </div>\n  );\n}\n\nHeader.defaultProps = {\n  link: \"https://github.com/scaffold-eth/scaffold-eth\",\n  title: \"🏗 Scaffold-Eth\",\n  subTitle: \"Forkable Ethereum dev stack focused on fast product iteration\",\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nconst createProvider = async url => {\n  const p = new ethers.providers.StaticJsonRpcProvider(url);\n\n  await p.ready;\n\n  return p;\n};\n\nexport default function useStaticJsonRPC(urlArray) {\n  const [provider, setProvider] = useState(null);\n\n  const handleProviders = useCallback(async () => {\n    try {\n      const p = await Promise.race(urlArray.map(createProvider));\n      const _p = await p;\n\n      setProvider(_p);\n    } catch (error) {\n      // todo: show notification error about provider issues\n      console.log(error);\n    }\n  }, [urlArray]);\n\n  useEffect(() => {\n    handleProviders();\n    // eslint-disable-next-line\n  }, [JSON.stringify(urlArray)]);\n\n  return provider;\n}\n","const contractListPromise = import(\"../contracts/hardhat_contracts.json\");\n// @ts-ignore\nconst externalContractsPromise = import(\"../contracts/external_contracts\");\n\nexport const loadAppContracts = async () => {\n  const config = {};\n  config.deployedContracts = (await contractListPromise).default ?? {};\n  config.externalContracts = (await externalContractsPromise).default ?? {};\n  return config;\n};\n","import {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\n\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n  return undefined;\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n  const [tokens, setTokens] = useState();\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenListResponse = await fetch(_tokenListUri);\n        const tokenListJson = await tokenListResponse.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI, _tokenListUri, activeChainId]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n    // eslint-disable-next-line\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades, exact]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { utils, ethers } from \"ethers\";\nimport { useContractLoader, useOnBlock } from \"eth-hooks\";\n\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/** \nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n**/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup, activeConfig.L1, activeConfig.L2]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import { Alert, Button } from \"antd\";\nimport React from \"react\";\n\nimport { NETWORK } from \"../constants\";\n\nfunction NetworkDisplay({\n  NETWORKCHECK,\n  localChainId,\n  selectedChainId,\n  targetNetwork,\n  USE_NETWORK_SELECTOR,\n  logoutOfWeb3Modal,\n}) {\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = USE_NETWORK_SELECTOR ? null : (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 150, top: 25, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  console.log({ networkDisplay });\n\n  return networkDisplay;\n}\n\nexport default NetworkDisplay;\n","import { Select } from \"antd\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\n\nimport { useTokenList } from \"eth-hooks/dapps/dex\";\nimport { Address, AddressInput } from \"../components\";\n\nconst { Option } = Select;\n\nexport default function Hints({ yourLocalBalance, mainnetProvider, price, address }) {\n  // Get a list of tokens from a tokenlist -> see tokenlists.org!\n  const [selectedToken, setSelectedToken] = useState(\"Pick a token!\");\n  const listOfTokens = useTokenList(\n    \"https://raw.githubusercontent.com/SetProtocol/uniswap-tokenlist/main/set.tokenlist.json\",\n  );\n\n  return (\n    <div>\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>👷</span>\n        Edit your <b>contract</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/contracts\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🛰</span>\n        <b>compile/deploy</b> with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚀</span>\n        Your <b>contract artifacts</b> are automatically injected into your frontend at\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/react-app/src/contracts/\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🎛</span>\n        Edit your <b>frontend</b> in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/reactapp/src/App.js\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔭</span>\n        explore the\n        <span\n          className=\"highlight\"\n          style={{\n            marginLeft: 4,\n            marginRight: 4,\n            /* backgroundColor: \"#f9f9f9\", */\n            padding: 4,\n            borderRadius: 4,\n            fontWeight: \"bolder\",\n          }}\n        >\n          🖇 hooks\n        </span>\n        and\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          📦 components\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        for example, the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          useBalance()\n        </span>{\" \"}\n        hook keeps track of your balance: <b>{utils.formatEther(yourLocalBalance || 0)}</b>\n      </div>\n\n      <div style={{ margin: 8 }}>\n        <div>\n          <b>useTokenList()</b> can get you an array of tokens from{\" \"}\n          <a href=\"https://tokenlists.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n            tokenlists.org!\n          </a>\n        </div>\n        <Select\n          showSearch\n          value={selectedToken}\n          onChange={value => {\n            console.log(`selected ${value}`);\n            setSelectedToken(value);\n          }}\n          filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n          optionFilterProp=\"children\"\n        >\n          {listOfTokens.map(token => (\n            <Option key={token.address + \"_\" + token.symbol} value={token.symbol}>\n              {token.symbol}\n            </Option>\n          ))}\n        </Select>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        as you build your app you&apos;ll need web3 specific components like an\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          {\"<AddressInput/>\"}\n        </span>\n        component:\n        <div style={{ width: 350, padding: 16, margin: \"auto\" }}>\n          <AddressInput ensProvider={mainnetProvider} />\n        </div>\n        <div>(try putting in your address, an ens address, or scanning a QR code)</div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        this balance could be multiplied by\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          price\n        </span>{\" \"}\n        that is loaded with the\n        <span\n          className=\"highlight\"\n          style={{ margin: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          usePrice\n        </span>{\" \"}\n        hook with the current value: <b>${price}</b>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💧</span>\n        use the <b>faucet</b> to send funds to\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <Address address={address} minimized /> {address}\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        deploy to a testnet or mainnet by editing\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat/hardhat.config.js\n        </span>\n        and running\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run deploy\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🔑</span>\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run generate\n        </span>\n        will create a deployer account in\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          packages/hardhat\n        </span>\n        <div style={{ marginTop: 8 }}>\n          (use{\" \"}\n          <span\n            className=\"highlight\"\n            style={{\n              marginLeft: 4,\n              /* backgroundColor: \"#f1f1f1\", */ padding: 4,\n              borderRadius: 4,\n              fontWeight: \"bolder\",\n            }}\n          >\n            yarn run account\n          </span>{\" \"}\n          to display deployer address and balance)\n        </div>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>⚙️</span>\n        build your app with\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run build\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        ship it!\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run surge\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run s3\n        </span>\n        or\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          yarn run ipfs\n        </span>\n      </div>\n\n      <div style={{ marginTop: 32 }}>\n        <span style={{ marginRight: 8 }}>💬</span>\n        for support, join this\n        <span\n          className=\"highlight\"\n          style={{ marginLeft: 4, /* backgroundColor: \"#f9f9f9\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n        >\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\">\n            Telegram Chat\n          </a>\n        </span>\n      </div>\n      <div style={{ padding: 128 }}>\n        🛠 Check out your browser&apos;s developer console for more... (inspect console) 🚀\n      </div>\n    </div>\n  );\n}\n","import { gql, useQuery } from \"@apollo/client\";\nimport { Button, Input, Table, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport GraphiQL from \"graphiql\";\nimport \"graphiql/graphiql.min.css\";\nimport fetch from \"isomorphic-fetch\";\nimport React, { useState } from \"react\";\nimport { Address } from \"../components\";\n\nconst highlight = {\n  marginLeft: 4,\n  marginRight: 8,\n  /* backgroundColor: \"#f9f9f9\", */ padding: 4,\n  borderRadius: 4,\n  fontWeight: \"bolder\",\n};\n\nfunction Subgraph(props) {\n  function graphQLFetcher(graphQLParams) {\n    return fetch(props.subgraphUri, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(graphQLParams),\n    }).then(response => response.json());\n  }\n\n  const EXAMPLE_GRAPHQL = `\n  {\n    purposes(first: 25, orderBy: createdAt, orderDirection: desc) {\n      id\n      purpose\n      createdAt\n      sender {\n        id\n      }\n    }\n    senders {\n      id\n      address\n      purposeCount\n    }\n  }\n  `;\n  const EXAMPLE_GQL = gql(EXAMPLE_GRAPHQL);\n  const { loading, data } = useQuery(EXAMPLE_GQL, { pollInterval: 2500 });\n\n  const purposeColumns = [\n    {\n      title: \"Purpose\",\n      dataIndex: \"purpose\",\n      key: \"purpose\",\n    },\n    {\n      title: \"Sender\",\n      key: \"id\",\n      render: record => <Address value={record.sender.id} ensProvider={props.mainnetProvider} fontSize={16} />,\n    },\n    {\n      title: \"createdAt\",\n      key: \"createdAt\",\n      dataIndex: \"createdAt\",\n      render: d => new Date(d * 1000).toISOString(),\n    },\n  ];\n\n  const [newPurpose, setNewPurpose] = useState(\"loading...\");\n\n  const deployWarning = (\n    <div style={{ marginTop: 8, padding: 8 }}>Warning: 🤔 Have you deployed your subgraph yet?</div>\n  );\n\n  return (\n    <>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        You will find that parsing/tracking events with the{\" \"}\n        <span className=\"highlight\" style={highlight}>\n          useEventListener\n        </span>{\" \"}\n        hook becomes a chore for every new project.\n      </div>\n      <div style={{ margin: \"auto\", marginTop: 32 }}>\n        Instead, you can use{\" \"}\n        <a href=\"https://thegraph.com/docs/about/introduction\" target=\"_blank\" rel=\"noopener noreferrer\">\n          The Graph\n        </a>{\" \"}\n        with 🏗 scaffold-eth (\n        <a href=\"https://youtu.be/T5ylzOTkn-Q\" target=\"_blank\" rel=\"noopener noreferrer\">\n          learn more\n        </a>\n        ):\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>⛓️</span>\n        Make sure your local chain is running first:\n        <span className=\"highlight\" style={highlight}>\n          yarn chain\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚮</span>\n        Clean up previous data, if there is any:\n        <span className=\"highlight\" style={highlight}>\n          yarn clean-graph-node\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📡</span>\n        Spin up a local graph node by running\n        <span className=\"highlight\" style={highlight}>\n          yarn run-graph-node\n        </span>\n        <span style={{ marginLeft: 4 }}>\n          {\" \"}\n          (requires{\" \"}\n          <a href=\"https://www.docker.com/products/docker-desktop\" target=\"_blank\" rel=\"noopener noreferrer\">\n            {\" \"}\n            Docker\n          </a>\n          ){\" \"}\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>📝</span>\n        Create your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-create-local\n        </span>\n        (only required once!)\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🚢</span>\n        Deploy your <b>local subgraph</b> by running\n        <span className=\"highlight\" style={highlight}>\n          yarn graph-ship-local\n        </span>\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🖍️</span>\n        Edit your <b>local subgraph</b> in\n        <span className=\"highlight\" style={highlight}>\n          packages/subgraph/src\n        </span>\n        (learn more about subgraph definition{\" \"}\n        <a\n          href=\"https://thegraph.com/docs/en/developer/define-subgraph-hosted/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          here\n        </a>\n        )\n      </div>\n\n      <div style={{ margin: 32 }}>\n        <span style={{ marginRight: 8 }}>🤩</span>\n        Deploy your <b>contracts and your subgraph</b> in one go by running\n        <span className=\"highlight\" style={highlight}>\n          yarn deploy-and-graph\n        </span>\n      </div>\n\n      <div style={{ width: 780, margin: \"auto\", paddingBottom: 64 }}>\n        <div style={{ margin: 32, textAlign: \"right\" }}>\n          <Input\n            onChange={e => {\n              setNewPurpose(e.target.value);\n            }}\n          />\n          <Button\n            onClick={() => {\n              console.log(\"newPurpose\", newPurpose);\n              /* look how you call setPurpose on your contract: */\n              props.tx(props.writeContracts.YourContract.setPurpose(newPurpose));\n            }}\n          >\n            Set Purpose\n          </Button>\n        </div>\n\n        {data ? (\n          <Table dataSource={data.purposes} columns={purposeColumns} rowKey=\"id\" />\n        ) : (\n          <Typography>{loading ? \"Loading...\" : deployWarning}</Typography>\n        )}\n\n        <div style={{ margin: 32, height: 400, border: \"1px solid #888888\", textAlign: \"left\" }}>\n          <GraphiQL fetcher={graphQLFetcher} docExplorerOpen query={EXAMPLE_GRAPHQL} />\n        </div>\n      </div>\n\n      <div style={{ padding: 64 }}>...</div>\n    </>\n  );\n}\n\nexport default Subgraph;\n","var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgBlock(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 149 171\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    className: \"jss2141 jss2874\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"polygon\", {\n    id: \"Polygon\",\n    fill: \"currentColor\",\n    points: \"74.5 0 148.545172 42.75 148.545172 128.25 74.5 171 0.454827976 128.25 0.454827976 42.75\"\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBlock);\nexport default __webpack_public_path__ + \"static/media/block.4b9d0872.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\n\nimport { ReactComponent as ReactLogo } from \"./block.svg\";\nimport \"./Block.css\";\n\nconst strokes = new Array(9).fill(null);\n\n// variant = \"created\" | \"add\"\nexport default function Block({ strokeColor = \"#9E9FA6FF\", variant = \"created\", onClick }) {\n  return (\n    <div className=\"block\" onClick={onClick}>\n      <ReactLogo className=\"blockSvg\" />\n\n      <div className=\"jss2142\">\n        {strokes.map((_, index) => (\n          <div key={index} className=\"jss2143 jss2875\" style={{ borderColor: strokeColor }}></div>\n        ))}\n      </div>\n\n      {variant === \"add\" && (\n        <div className=\"add\" style={{ color: strokeColor }}>\n          +\n        </div>\n      )}\n    </div>\n  );\n}\n","// deposit\n// time_condition\n// send\n// swap\n\nconst blockOptions = [\n  {\n    type: \"deposit\",\n    domain: \"Apwine\",\n    label: \"Deposit\",\n    asset: \"USDC\",\n    fields: [\n      {\n        type: \"asset_amount\",\n        address: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", // token address\n        symbol: \"USDC\",\n      },\n    ],\n    in: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", // token address\n    out: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", // token address\n    address: \"0x0000000000000000000000000000000000000000\", // block address\n    address_to_call: \"0x0000000000000000000000000000000000000000\",\n    approve: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", // token address\n    method: \"\",\n  },\n  {\n    type: \"deposit\",\n    domain: \"Aave\",\n    label: \"Deposit\",\n    asset: \"USDC\",\n    fields: [\n      {\n        type: \"asset_amount\",\n        address: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", // token address\n        symbol: \"USDC\",\n      },\n    ],\n    in: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\",\n    out: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", // token address\n    address: \"0x9F0B13D9469748Eb57969A403BeF4A0596D73ae8\", // block address\n    address_to_call: \"0x0000000000000000000000000000000000000000\",\n    approve: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", // token address\n    receiptAddressToken: \"0x625e7708f30ca75bfd92586e17077590c60eb4cd\",\n    method: \"\",\n  },\n  {\n    type: \"time_condition\",\n    label: \"Time Condition\",\n    fields: [\n      {\n        type: \"time\", // in seconds\n      },\n    ],\n    //in from prev\n    //out from prev\n    address_to_call: \"0x0000000000000000000000000000000000000000\",\n    address: \"0x0000000000000000000000000000000000000000\", // block address\n    method: \"\",\n  },\n  {\n    type: \"claim\",\n    label: \"Claim Rewards\",\n    //in from prev\n    //out from prev\n    address_to_call: \"0x0000000000000000000000000000000000000000\",\n    address: \"0xf460988E9E7c0211C30Ba73714BA52993dac5d28\", // block address\n    approve: \"0x625e7708f30ca75bfd92586e17077590c60eb4cd\", // receiptAddressToken\n    method: \"\",\n  },\n  {\n    type: \"send\",\n    label: \"Send\",\n    fields: [\n      {\n        type: \"address\",\n        address: \"0x0000000000000000000000000000000000000000\", // destination address\n      },\n    ],\n    // in from prev\n    // out nothing\n    address_to_call: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", // token address\n    address: \"0x1C2e496944Be8b352f0668C0F1DF78288137c21A\", // block address\n    // approve: \"0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\", // address to call address\n    method: \"\",\n  },\n  {\n    type: \"swap\",\n    label: \"Swap\",\n    domain: \"Uniswap\",\n    fields: [\n      {\n        type: \"swap_to\",\n        // value: \"asset_address\",\n      },\n    ],\n    //in from prev\n    //out is destination asset\n    address_to_call: \"0x0000000000000000000000000000000000000000\",\n    address: \"0x0000000000000000000000000000000000000000\", // block address\n    // approve: \"0x0000000000000000000000000000000000000000\", // in address\n    method: \"\",\n  },\n  {\n    type: \"receive_streaming\",\n    label: \"Receive Streaming\",\n    domain: \"Superfluid\",\n    //in from prev\n    //out from prev\n    address_to_call: \"0x0000000000000000000000000000000000000000\",\n    address: \"0x0000000000000000000000000000000000000000\", // block address\n    // approve: \"0x0000000000000000000000000000000000000000\", // in address\n    method: \"\",\n  },\n];\n\nexport default blockOptions;\n","import React, { useCallback } from \"react\";\nimport { Modal } from \"antd\";\n\nimport blockOptions from \"../blockOptions\";\n\nimport \"./CreateBlock.css\";\n\nexport default function CreateBlock({ visible, setVisibility, setEditableBlock, setBlocks }) {\n  const handleCancel = useCallback(() => {\n    setVisibility(false);\n  }, []);\n\n  const handleOk = useCallback(block => {\n    console.log({ block });\n    if (block.fields) {\n      setEditableBlock(block);\n    } else {\n      setBlocks(current => {\n        const res = [...current, block];\n\n        localStorage.setItem(\"blocks\", JSON.stringify(res));\n\n        return res;\n      });\n    }\n\n    setVisibility(false);\n  }, []);\n\n  return (\n    <Modal visible={visible} onOk={handleCancel} onCancel={handleCancel}>\n      <div className=\"blockOptions\">\n        {blockOptions.map((block, index) => (\n          <div type={index} onClick={() => handleOk(block)} className=\"option\">\n            {block.label} {block.asset} {block.domain && `(${block.domain})`}\n          </div>\n        ))}\n      </div>\n    </Modal>\n  );\n}\n","import React, { useCallback, useState, useEffect } from \"react\";\n\nimport \"./BlockDetails.css\";\n\nexport default function BlockDetails({ data, blocks, setBlocks, setEditableBlock }) {\n  const [blockData, setBlockData] = useState(data);\n\n  useEffect(() => {\n    setBlockData(data);\n  }, [data]);\n\n  const handleAddBlock = useCallback(() => {\n    console.log(\"add new block\", blockData);\n\n    if (blocks.length > 0) {\n      setBlocks(current => {\n        const res = [\n          ...current,\n          {\n            ...blockData,\n            in: blocks[blocks.length - 1].out,\n            out: blocks[blocks.length - 1].out,\n          },\n        ];\n\n        localStorage.setItem(\"blocks\", JSON.stringify(res));\n\n        return res;\n      });\n\n      return setEditableBlock(null);\n    }\n\n    if (blockData.out) {\n      setBlocks(current => {\n        const res = [...current, blockData];\n\n        localStorage.setItem(\"blocks\", JSON.stringify(res));\n\n        return res;\n      });\n\n      return setEditableBlock(null);\n    } else {\n      console.error(\"Problem with blocks output\");\n    }\n  }, [blockData, blocks, setBlocks, setEditableBlock]);\n\n  const handleChangeInput = useCallback(\n    ev => {\n      const updatedFields = blockData.fields.map((item, fieldIndex) => {\n        if (fieldIndex === Number(ev.target.ariaRowIndex)) {\n          return {\n            ...item,\n            value: ev.target.value,\n          };\n        }\n\n        return item;\n      });\n\n      setBlockData({\n        ...blockData,\n        fields: updatedFields,\n      });\n    },\n    [blockData],\n  );\n\n  if (!data) {\n    return <div className=\"blockDetails\" style={{ background: \"transparent\" }} />;\n  }\n\n  return (\n    <div className=\"blockDetails\">\n      <div className=\"header\">\n        <div className=\"badge\">{data.label}</div>\n\n        {data.domain && <div className=\"domain\">{data.domain}</div>}\n      </div>\n\n      <div className=\"body\">\n        {(data.fields ?? []).map((field, index) => {\n          if (field.value) {\n            return (\n              <div className=\"field\" key={field.type}>\n                <div className=\"value\">\n                  {field.value} {field.symbol}\n                </div>\n              </div>\n            );\n          }\n\n          switch (field.type) {\n            case \"asset_amount\":\n              return (\n                <div className=\"field\" key={field.type}>\n                  <input type=\"number\" className=\"input\" onChange={handleChangeInput} aria-rowindex={index} />\n                  <div className=\"label\">{field.symbol}</div>\n                </div>\n              );\n            case \"time\":\n              return (\n                <div className=\"field\" key={field.type}>\n                  <input type=\"number\" className=\"input\" onChange={handleChangeInput} aria-rowindex={index} />\n                  <div className=\"label\">secs</div>\n                </div>\n              );\n            case \"address\":\n              return (\n                <div className=\"field\" key={field.type}>\n                  <div className=\"label\">To</div>\n                  <input type=\"text\" className=\"input\" onChange={handleChangeInput} />\n                </div>\n              );\n            case \"swap_to\":\n              return (\n                <div className=\"field\" key={field.type}>\n                  <div className=\"label\">To</div>\n                  <input type=\"text\" className=\"input\" onChange={handleChangeInput} />\n                </div>\n              );\n            default:\n              return null;\n          }\n        })}\n\n        {data.fields && !data.fields.some(field => Boolean(field.value)) && (\n          <button onClick={handleAddBlock} className=\"button\">\n            Add\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n","export const REGISTRY_ADDR_MUMBAI = \"0xe87800fEb6E7aEcEB8F136f1d821E98500C0FF42\";\nexport const REGISTRY_ADDR_POLYGON_MAINNET = \"0x18d02301E534cab22267460eD8fBdf2B8382A3ff\";\n\nexport const REGISTRY_ABI = [\n  {\n    inputs: [\n      {\n        internalType: \"contract IStakeManager\",\n        name: \"stakeMan\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IOracle\",\n        name: \"oracle\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IForwarder\",\n        name: \"userForwarder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IForwarder\",\n        name: \"gasForwarder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"contract IForwarder\",\n        name: \"userGasForwarder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"string\",\n        name: \"tokenName\",\n        type: \"string\",\n      },\n      {\n        internalType: \"string\",\n        name: \"tokenSymbol\",\n        type: \"string\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"totalAUTOSupply\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"user\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address\",\n        name: \"target\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"address payable\",\n        name: \"referer\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"callData\",\n        type: \"bytes\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint112\",\n        name: \"initEthSent\",\n        type: \"uint112\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint112\",\n        name: \"ethForCall\",\n        type: \"uint112\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"verifyUser\",\n        type: \"bool\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"insertFeeAmount\",\n        type: \"bool\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"payWithAUTO\",\n        type: \"bool\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"isAlive\",\n        type: \"bool\",\n      },\n    ],\n    name: \"HashedReqAdded\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"HashedReqCancelled\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        internalType: \"bool\",\n        name: \"wasRemoved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"HashedReqExecuted\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"BASE_BPS\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"GAS_OVERHEAD_AUTO\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"GAS_OVERHEAD_ETH\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"PAY_AUTO_BPS\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"PAY_ETH_BPS\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address payable\",\n            name: \"user\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"referer\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"uint112\",\n            name: \"initEthSent\",\n            type: \"uint112\",\n          },\n          {\n            internalType: \"uint112\",\n            name: \"ethForCall\",\n            type: \"uint112\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"verifyUser\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"insertFeeAmount\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"payWithAUTO\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"isAlive\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IRegistry.Request\",\n        name: \"r\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"cancelHashedReq\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n      {\n        components: [\n          {\n            internalType: \"address payable\",\n            name: \"user\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"referer\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"uint112\",\n            name: \"initEthSent\",\n            type: \"uint112\",\n          },\n          {\n            internalType: \"uint112\",\n            name: \"ethForCall\",\n            type: \"uint112\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"verifyUser\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"insertFeeAmount\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"payWithAUTO\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"isAlive\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IRegistry.Request\",\n        name: \"r\",\n        type: \"tuple\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expectedGas\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"executeHashedReq\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"gasUsed\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getAUTOAddr\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"getExecCountOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getGasForwarder\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getHashedReq\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getHashedReqs\",\n    outputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"\",\n        type: \"bytes32[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getHashedReqsLen\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"startIdx\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"endIdx\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getHashedReqsSlice\",\n    outputs: [\n      {\n        internalType: \"bytes32[]\",\n        name: \"\",\n        type: \"bytes32[]\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getOracle\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"getReferalCountOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        components: [\n          {\n            internalType: \"address payable\",\n            name: \"user\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address\",\n            name: \"target\",\n            type: \"address\",\n          },\n          {\n            internalType: \"address payable\",\n            name: \"referer\",\n            type: \"address\",\n          },\n          {\n            internalType: \"bytes\",\n            name: \"callData\",\n            type: \"bytes\",\n          },\n          {\n            internalType: \"uint112\",\n            name: \"initEthSent\",\n            type: \"uint112\",\n          },\n          {\n            internalType: \"uint112\",\n            name: \"ethForCall\",\n            type: \"uint112\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"verifyUser\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"insertFeeAmount\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"payWithAUTO\",\n            type: \"bool\",\n          },\n          {\n            internalType: \"bool\",\n            name: \"isAlive\",\n            type: \"bool\",\n          },\n        ],\n        internalType: \"struct IRegistry.Request\",\n        name: \"r\",\n        type: \"tuple\",\n      },\n    ],\n    name: \"getReqBytes\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"addr\",\n        type: \"address\",\n      },\n    ],\n    name: \"getReqCountOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getStakeManager\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getUserForwarder\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"getUserGasForwarder\",\n    outputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"bytes\",\n        name: \"callData\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expectedGas\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"startIdx\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"insertToCallData\",\n    outputs: [\n      {\n        internalType: \"bytes\",\n        name: \"\",\n        type: \"bytes\",\n      },\n    ],\n    stateMutability: \"pure\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"target\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address payable\",\n        name: \"referer\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"callData\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint112\",\n        name: \"ethForCall\",\n        type: \"uint112\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"verifyUser\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"insertFeeAmount\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"isAlive\",\n        type: \"bool\",\n      },\n    ],\n    name: \"newReq\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"target\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address payable\",\n        name: \"referer\",\n        type: \"address\",\n      },\n      {\n        internalType: \"bytes\",\n        name: \"callData\",\n        type: \"bytes\",\n      },\n      {\n        internalType: \"uint112\",\n        name: \"ethForCall\",\n        type: \"uint112\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"verifyUser\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"insertFeeAmount\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"payWithAUTO\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"isAlive\",\n        type: \"bool\",\n      },\n    ],\n    name: \"newReqPaySpecific\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"id\",\n        type: \"uint256\",\n      },\n    ],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    stateMutability: \"payable\",\n    type: \"receive\",\n  },\n];\n","import React, { useState, useEffect, useCallback } from \"react\";\nimport { ethers } from \"ethers\";\n\nimport Block from \"./Block\";\nimport CreateBlock from \"./CreateBlock\";\nimport BlockDetails from \"./BlockDetails\";\nimport factoryAbi from \"./abis/SlothyVaultFactoryAbi.json\";\nimport vaultAbi from \"./abis/BlockAbi.json\";\nimport { FACTORY_ADDRESS } from \"./constants\";\nimport { REGISTRY_ABI, REGISTRY_ADDR_POLYGON_MAINNET } from \"./abis/registry.abi\";\nimport \"./StrategyBuilder.css\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst mutateAddress = address => {\n  return `0x000000000000000000000000${address.slice(2)}`;\n};\n\nexport default function StrategyBuilder({ address, provider }) {\n  const [blocks, setBlocks] = useState([]);\n  const [addBlockModalOpen, setAddBlockModalOpen] = useState(false);\n  const [editableBlock, setEditableBlock] = useState(null);\n\n  useEffect(() => {\n    const blocks = JSON.parse(localStorage.getItem(\"blocks\"));\n\n    setBlocks(blocks ?? []);\n  }, []);\n\n  const handleSubmit = useCallback(async () => {\n    const provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner();\n    console.log(\"Account:\", await signer.getAddress());\n    console.log({ signer, factoryAbi });\n\n    console.log({ blocks, signer });\n\n    const factoryContract = new ethers.Contract(FACTORY_ADDRESS, factoryAbi.abi, signer);\n    const startingToken = new ethers.Contract(blocks[0].out, erc20Abi, signer);\n\n    const beforeLoop =\n      blocks[0].domain === \"Aave\"\n        ? [\n            {\n              target: blocks[0].address,\n              data: [\n                ethers.utils.formatBytes32String(blocks[0].fields[0].value),\n                mutateAddress(blocks[0].fields[0].address),\n              ],\n            },\n          ]\n        : [];\n\n    const approvals = blocks\n      .map(block => {\n        if (block.type === \"swap\") {\n          return {\n            token: block.id,\n            spender: block.address,\n            amount: 10 ** 18,\n          };\n        }\n\n        if (block.approve) {\n          return {\n            token: block.approve,\n            spender: block.address,\n            amount: 10 ** 18,\n          };\n        }\n      })\n      .filter(Boolean);\n\n    const loop = blocks.slice(2).map(block => {\n      switch (block.type) {\n        case \"claim\":\n          return {\n            target: block.address,\n            data: [\n              mutateAddress(blocks[0].fields[0].address),\n              mutateAddress(blocks[0].receiptAddressToken),\n              ethers.utils.formatBytes32String(\"10\"),\n            ],\n          };\n        case \"send\":\n          return {\n            target: block.address,\n            data: [mutateAddress(block.address_to_call), mutateAddress(block.fields[0].value)],\n          };\n        default:\n          return {};\n      }\n    });\n\n    console.log({ approvals, beforeLoop });\n\n    const _supportedTokens = approvals.map(approval => approval.token);\n\n    console.log({\n      a: blocks[0].fields[0].address,\n      b: blocks[0].fields[0].value,\n      c: _supportedTokens,\n      d: approvals,\n      e: beforeLoop,\n      f: loop,\n      g: blocks.find(block => block.type === \"time_condition\").fields[0].value,\n    });\n\n    await factoryContract.newVault(\n      blocks[0].fields[0].address,\n      blocks[0].fields[0].value,\n      [_supportedTokens[0]],\n      approvals,\n      beforeLoop,\n      loop,\n      blocks.find(block => block.type === \"time_condition\").fields[0].value,\n      {},\n    );\n\n    const vaultAddress = await factoryContract.userToVault(address);\n\n    console.log({ vaultAddress });\n\n    await startingToken.approve(vaultAddress, \"10000000000000000000000000\");\n\n    const vault = new ethers.Contract(vaultAddress, vaultAbi.abi, signer);\n\n    console.log({ vault });\n    await vault.setUp({ gasLimit: 100000000000, gasPrice: 500000000 });\n\n    // Create Autonomy Registry Instance\n    const autonomyRegistry = new ethers.Contract(REGISTRY_ADDR_POLYGON_MAINNET, REGISTRY_ABI, signer);\n\n    // Generate funciton signature and create calldata for Request\n    const vaultRunLoopSignature = [\"function runLoop()\"];\n    const vaultRunLoopInterface = new ethers.utils.Interface(vaultRunLoopSignature);\n    const callData = vaultRunLoopInterface.encodeFunctionData(\"runLoop\", []);\n\n    console.log(callData);\n\n    // Create new Request in Registry\n    let receipt = await autonomyRegistry.newReq(\n      vaultAddress,\n      \"0x0000000000000000000000000000000000000000\",\n      callData,\n      0,\n      false,\n      false,\n      false,\n      { value: 500000000000000 },\n    ); // todo check how much gas is needed for runLoop\n\n    console.log({ receipt });\n  }, [address, blocks, provider]);\n\n  return (\n    <div>\n      <div className=\"blocks\">\n        {blocks.map((block, index) => (\n          <div className=\"blockWrapper\" type={index}>\n            <Block />\n\n            <BlockDetails data={block} />\n          </div>\n        ))}\n\n        <div className=\"blockWrapper\">\n          <Block variant=\"add\" onClick={() => setAddBlockModalOpen(true)} />\n\n          <BlockDetails\n            data={editableBlock}\n            setBlocks={setBlocks}\n            blocks={blocks}\n            setEditableBlock={setEditableBlock}\n          />\n        </div>\n      </div>\n\n      <CreateBlock\n        visible={addBlockModalOpen}\n        setVisibility={setAddBlockModalOpen}\n        setEditableBlock={setEditableBlock}\n        setBlocks={setBlocks}\n      />\n\n      <button className=\"button\" onClick={handleSubmit} disabled={!address || blocks.length === 0}>\n        {address ? \"Submit\" : \"You need to connect\"}\n      </button>\n    </div>\n  );\n}\n","export const FACTORY_ADDRESS = \"0x385Ced70A397bc8e35583376e141c15C44915D53\";\n","import { Button, Col, Menu, Row } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useExchangeEthPrice } from \"eth-hooks/dapps/dex\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Link, Route, Switch, useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport {\n  Account,\n  Contract,\n  Faucet,\n  GasGauge,\n  Header,\n  Ramp,\n  ThemeSwitch,\n  NetworkDisplay,\n  FaucetHint,\n  NetworkSwitch,\n} from \"./components\";\nimport { NETWORKS, ALCHEMY_KEY } from \"./constants\";\nimport externalContracts from \"./contracts/external_contracts\";\n// contracts\nimport deployedContracts from \"./contracts/hardhat_contracts.json\";\nimport { Transactor, Web3ModalSetup } from \"./helpers\";\nimport { Home, ExampleUI, Hints, Subgraph, StrategyBuilder } from \"./views\";\nimport { useStaticJsonRPC } from \"./hooks\";\n\nconst { ethers } = require(\"ethers\");\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/scaffold-eth/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Alchemy.com & Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst initialNetwork = NETWORKS.localhost; // <------- select your target frontend network (localhost, goerli, xdai, mainnet)\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\nconst USE_BURNER_WALLET = false; // toggle burner wallet feature\nconst USE_NETWORK_SELECTOR = false;\n\nconst web3Modal = Web3ModalSetup();\n\n// 🛰 providers\nconst providers = [\n  \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n  `https://eth-mainnet.alchemyapi.io/v2/${ALCHEMY_KEY}`,\n  \"https://rpc.scaffoldeth.io:48544\",\n];\n\nfunction App(props) {\n  // specify all the chains your app is available on. Eg: ['localhost', 'mainnet', ...otherNetworks ]\n  // reference './constants.js' for other networks\n  const networkOptions = [\"polygon\", \"mumbai\", initialNetwork.name, \"mainnet\", \"goerli\"];\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n  const [selectedNetwork, setSelectedNetwork] = useState(networkOptions[0]);\n\n  const targetNetwork = NETWORKS[selectedNetwork];\n\n  // 🔭 block explorer URL\n  const blockExplorer = targetNetwork.blockExplorer;\n\n  // load all your providers\n  const localProvider = useStaticJsonRPC([\n    process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : targetNetwork.rpcUrl,\n  ]);\n  const mainnetProvider = useStaticJsonRPC(providers);\n\n  if (DEBUG) console.log(`Using ${selectedNetwork} network`);\n\n  // 🛰 providers\n  if (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangeEthPrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider, USE_BURNER_WALLET);\n  const userSigner = userProviderAndSigner.signer;\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // const contractConfig = useContractConfig();\n\n  const contractConfig = { deployedContracts: deployedContracts || {}, externalContracts: externalContracts || {} };\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider, contractConfig);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n\n  // EXTERNAL CONTRACT EXAMPLE:\n  //\n  // If you want to bring in the mainnet DAI contract it would look like:\n  const mainnetContracts = useContractLoader(mainnetProvider, contractConfig);\n\n  // If you want to call a function on a new block\n  useOnBlock(mainnetProvider, () => {\n    // console.log(`⛓ A new mainnet block is here: ${mainnetProvider._lastBlockNumber}`);\n  });\n\n  // Then read your DAI balance like:\n  const myMainnetDAIBalance = useContractReader(mainnetContracts, \"DAI\", \"balanceOf\", [\n    \"0x34aA3F359A9D614239015126635CE7732c18fDF3\",\n  ]);\n\n  // keep track of a variable from the contract in the local React state:\n  const purpose = useContractReader(readContracts, \"YourContract\", \"purpose\");\n\n  /*\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n  console.log(\"🏷 Resolved austingriffith.eth as:\",addressFromENS)\n  */\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n    // eslint-disable-next-line\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header>\n        {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n        <div style={{ position: \"relative\", display: \"flex\", flexDirection: \"column\" }}>\n          <div style={{ display: \"flex\", flex: 1 }}>\n            {USE_NETWORK_SELECTOR && (\n              <div style={{ marginRight: 20 }}>\n                <NetworkSwitch\n                  networkOptions={networkOptions}\n                  selectedNetwork={selectedNetwork}\n                  setSelectedNetwork={setSelectedNetwork}\n                />\n              </div>\n            )}\n            <Account\n              useBurner={USE_BURNER_WALLET}\n              address={address}\n              localProvider={localProvider}\n              userSigner={userSigner}\n              mainnetProvider={mainnetProvider}\n              price={price}\n              web3Modal={web3Modal}\n              loadWeb3Modal={loadWeb3Modal}\n              logoutOfWeb3Modal={logoutOfWeb3Modal}\n              blockExplorer={blockExplorer}\n            />\n          </div>\n        </div>\n      </Header>\n\n      <NetworkDisplay\n        NETWORKCHECK={NETWORKCHECK}\n        localChainId={localChainId}\n        selectedChainId={selectedChainId}\n        targetNetwork={targetNetwork}\n        logoutOfWeb3Modal={logoutOfWeb3Modal}\n        USE_NETWORK_SELECTOR={USE_NETWORK_SELECTOR}\n      />\n\n      <StrategyBuilder address={address} provider={localProvider} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={\"dark\"}>\n      <BrowserRouter>\n        <App subgraphUri={subgraphUri} />\n      </BrowserRouter>\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}